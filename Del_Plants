wait(60)
_G.KeepAmount = {
    Bamboo = 3,
    Coconut = 3,
    Mushroom = 3,
    Glowthorn = 3,
    Tomato = 5,
    Pumpkin = 3,
    Pepper = 3,
    Cacao = 5,
    Apple = 5,
    Romanesco = 3,
    ["Elder Strawberry"] = 3,
    ["Burning Bud"] = 3,
    ["Giant Pinecone"] = 3,
    Corn = 3,
    ["Sugar Apple"] = 3,
    ["Ember Lily"] = 3,
    ["Dragon Fruit"] = 5,
    Sunbulb = 8,
    ["Orange Tulip"] = 3,
    Blueberry = 5,
    Watermelon = 3,
    Mango = 5,
    Cactus = 3,
    Strawberry = 5,
    Beanstalk = 3,
    Lightshoot = 3,
    Grape = 3,
    Daffodil = 3
}

_G.Treelist = {
    "Moon Blossom",
    "Bone Blossom",
    "Moon Melon",
    "Maple Apple",
    "Moon Mango",
    "Dragon Pepper",
    "Elephant Ears",
    "Fossilight",
    "Princess Thorn"
}

_G.Remove = true
_G.MaxPlants = 138
local DEFAULT_KEEP = 2 -- số lượng giữ cho các loại KHÔNG nằm trong _G.KeepAmount

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local function getOwnedPlot()
    for _, plot in pairs(workspace.Farm:GetChildren()) do
        local important = plot:FindFirstChild("Important") or plot:FindFirstChild("Importanert")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
                return plot
            end
        end
    end
    return nil
end

local function EquipShovel()
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    local shovel = nil
    if backpack then
        shovel = backpack:FindFirstChild("Shovel [Destroy Plants]") 
    end
    if not shovel and character then
        shovel = character:FindFirstChild("Shovel [Destroy Plants]")
    end
    if shovel and character and shovel.Parent ~= character then
        shovel.Parent = character
    end
end

-- Kiểm tra tên cây có trong Treelist (exact match)
local function isInTreelist(treeName)
    for _, name in pairs(_G.Treelist) do
        if treeName == name then
            return true
        end
    end
    return false
end

-- Đếm tổng số cây trong plot (Model) và đếm số lượng từng loại (key = plant.Name)
local function countPlants(plot)
    local total = 0
    local typeCounts = {} -- typeCounts[name] = số lượng hiện có của loại name

    if not plot or not plot:FindFirstChild("Important") then
        return 0, typeCounts
    end
    local plantsFolder = plot.Important:FindFirstChild("Plants_Physical")
    if not plantsFolder then
        return 0, typeCounts
    end

    for _, plant in pairs(plantsFolder:GetChildren()) do
        if plant:IsA("Model") then
            total = total + 1
            local name = plant.Name
            typeCounts[name] = (typeCounts[name] or 0) + 1
        end
    end

    return total, typeCounts
end

local processing = false
local function DestroyTree()
    if processing then return end
    processing = true

    local ok, err = pcall(function()
        if not _G.Remove then return end

        local plot = getOwnedPlot()
        if not plot then return end

        local plantsFolder = plot.Important and plot.Important:FindFirstChild("Plants_Physical")
        if not plantsFolder then return end

        local total, typeCounts = countPlants(plot)
        if total <= (_G.MaxPlants or 120) then
            return
        end

        EquipShovel()

        -- Duyệt cây; nếu loại đó hiện có > keepNum thì có thể xóa từng cây cho tới khi total <= MaxPlants
        for _, plant in pairs(plantsFolder:GetChildren()) do
            if total <= (_G.MaxPlants or 120) then break end

            if not plant:IsA("Model") then
                -- skip
            else
                local name = plant.Name

                -- nếu nằm trong Treelist thì bỏ qua hoàn toàn
                if isInTreelist(name) then
                    -- skip
                else
                    -- xác định số giữ cho loại này: nếu định nghĩa trong _G.KeepAmount thì dùng, nếu không dùng DEFAULT_KEEP
                    local keepNum = nil
                    if _G.KeepAmount and _G.KeepAmount[name] ~= nil then
                        keepNum = _G.KeepAmount[name]
                    else
                        keepNum = DEFAULT_KEEP
                    end

                    local currentOfType = typeCounts[name] or 0
                    if currentOfType > keepNum then
                        -- có thể xóa 1 cây của loại này
                        local part = plant.PrimaryPart or plant:FindFirstChildWhichIsA("BasePart")
                        if part then
                            ReplicatedStorage.GameEvents.Remove_Item:FireServer(part)
                            -- cập nhật bộ đếm client-side
                            total = total - 1
                            typeCounts[name] = currentOfType - 1
                            print("[AutoRemove] Removed:", name, "- remaining total:", total, "- remaining of type:", typeCounts[name])
                            task.wait(0.05) -- tránh spam
                        end
                    else
                        -- không đủ > keepNum, không xóa loại này nữa
                    end
                end
            end
        end
    end)

    if not ok then
        warn("Lỗi khi xóa cây: " .. tostring(err))
    end

    processing = false
end

-- vòng lặp định kỳ
while task.wait(0.5) do
    DestroyTree()
end
