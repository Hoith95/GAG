wait(60)
_G.KeepAmount = {
    ["Lily of the Valley"] = 2,
    Lilac = 2,
    Nectarine = 2,
    ["Bitter Melon"] = 2,
    Gleamroot = 2,
    Serenity = 2,
    Guanabana = 2,
    ["Grand Volcania"] = 2,
    ["Rosy Delight"] = 2,
    ["Parasol Flower"] = 2,
    ["Canary Melon"] = 2,
    Wispwing = 2,
    ["Badlands Pepper"] = 2,
    ["Nectar Thorn"] = 2,
    Amberheart = 2,
    Romanesco = 2,
    ["Amber Spine"] = 2,
    Sunflower = 2,
    Bendboo = 2,
    Mushroom = 2,
    ["Zen Rocks"] = 2,
    ["Firefly Fern"] = 2,
    Boneboo = 2,
    ["Burning Bud"] = 2,
    Lingonberry = 2,
    ["Butternut Squash"] = 2,
    ["Spirit Flower"] = 2,
    ["Soft Sunshine"] = 2,
    Cocovine = 2,
    ["Lucky Bamboo"] = 2,
    ["Meyer Lemon"] = 2,
    Pyracantha = 2,
    Enkaku = 2,
    Lightshoot = 2,
    ["Aurora Vine"] = 2,
    ["Taro Flower"] = 2,
    ["King Cabbage"] = 2,
    ["Princess Thorn"] = 2,
    Kniphofia = 2,
    Aetherfruit = 2,
    ["Snaparino Beanarini"] = 2,
    Duskpuff = 2,
    ["Tall Asparagus"] = 2,
    ["Crown Melon"] = 2,
    Honeysuckle = 2
}

_G.Treelist = {
    "Bone Blossom",
    "Candy Blossom",
    "Moon Melon",
    "Maple Apple",
    "Cocomango",
    "Maple Resin",
    "Spiked Mango",
    "Traveler's Fruit",
    "Dragon Pepper",
    "Fossilight",
    "Elephant Ears",
    "Giant Pinecone",
    "Sugar Apple",
    "Tranquil Bloom",
    "Potato",
    "Brussels Sprout",
    "Moon Blossom",
    "Golden Peach",
    "Poseidon Plant",
    "Hive Fruit",
    "Beanstalk",
    "Moon Mango",
    "Mangrove",
    "Elder Strawberry"
}

_G.Remove = true
_G.MaxPlants = 1
local DEFAULT_KEEP = 0

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local function getOwnedPlot()
    for _, plot in pairs(workspace.Farm:GetChildren()) do
        local important = plot:FindFirstChild("Important") or plot:FindFirstChild("Importanert")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
                return plot
            end
        end
    end
    return nil
end

local function EquipShovel()
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    local shovel = nil
    if backpack then
        shovel = backpack:FindFirstChild("Shovel [Destroy Plants]") 
    end
    if not shovel and character then
        shovel = character:FindFirstChild("Shovel [Destroy Plants]")
    end
    if shovel and character and shovel.Parent ~= character then
        shovel.Parent = character
    end
end

-- Kiểm tra tên cây có trong Treelist (exact match)
local function isInTreelist(treeName)
    for _, name in pairs(_G.Treelist) do
        if treeName == name then
            return true
        end
    end
    return false
end

-- Đếm tổng số cây trong plot (Model) và đếm số lượng từng loại (key = plant.Name)
local function countPlants(plot)
    local total = 0
    local typeCounts = {} -- typeCounts[name] = số lượng hiện có của loại name

    if not plot or not plot:FindFirstChild("Important") then
        return 0, typeCounts
    end
    local plantsFolder = plot.Important:FindFirstChild("Plants_Physical")
    if not plantsFolder then
        return 0, typeCounts
    end

    for _, plant in pairs(plantsFolder:GetChildren()) do
        if plant:IsA("Model") then
            total = total + 1
            local name = plant.Name
            typeCounts[name] = (typeCounts[name] or 0) + 1
        end
    end

    return total, typeCounts
end

local processing = false
local function DestroyTree()
    if processing then return end
    processing = true

    local ok, err = pcall(function()
        if not _G.Remove then return end

        local plot = getOwnedPlot()
        if not plot then return end

        local plantsFolder = plot.Important and plot.Important:FindFirstChild("Plants_Physical")
        if not plantsFolder then return end

        local total, typeCounts = countPlants(plot)
        if total <= (_G.MaxPlants or 120) then
            return
        end

        EquipShovel()

        -- Duyệt cây; nếu loại đó hiện có > keepNum thì có thể xóa từng cây cho tới khi total <= MaxPlants
        for _, plant in pairs(plantsFolder:GetChildren()) do
            if total <= (_G.MaxPlants or 120) then break end

            if not plant:IsA("Model") then
                -- skip
            else
                local name = plant.Name

                -- nếu nằm trong Treelist thì bỏ qua hoàn toàn
                if isInTreelist(name) then
                    -- skip
                else
                    -- xác định số giữ cho loại này: nếu định nghĩa trong _G.KeepAmount thì dùng, nếu không dùng DEFAULT_KEEP
                    local keepNum = nil
                    if _G.KeepAmount and _G.KeepAmount[name] ~= nil then
                        keepNum = _G.KeepAmount[name]
                    else
                        keepNum = DEFAULT_KEEP
                    end

                    local currentOfType = typeCounts[name] or 0
                    if currentOfType > keepNum then
                        -- có thể xóa 1 cây của loại này
                        local part = plant.PrimaryPart or plant:FindFirstChildWhichIsA("BasePart")
                        if part then
                            ReplicatedStorage.GameEvents.Remove_Item:FireServer(part)
                            -- cập nhật bộ đếm client-side
                            total = total - 1
                            typeCounts[name] = currentOfType - 1
                            print("[AutoRemove] Removed:", name, "- remaining total:", total, "- remaining of type:", typeCounts[name])
                            task.wait(0.05) -- tránh spam
                        end
                    else
                        -- không đủ > keepNum, không xóa loại này nữa
                    end
                end
            end
        end
    end)

    if not ok then
        warn("Lỗi khi xóa cây: " .. tostring(err))
    end

    processing = false
end

-- vòng lặp định kỳ
while task.wait(0.5) do
    DestroyTree()
end
